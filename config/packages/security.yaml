security:
  encoders:
    bcrypt:
      algorithm: bcrypt
      cost: 12
  providers:
    users:
      id: 'Acme\Infrastructure\User\Auth\AuthProvider'

  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false

    api_healthz:
      pattern:  ^/api/healthz
      stateless: true
      anonymous: true

    api_doc:
      pattern:  ^/api/doc
      stateless: true
      anonymous: true

    api_auth:
      pattern:  ^/api/auth
      stateless: true
      anonymous: true
      json_login:
        check_path: /api/auth_check
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure

    api_signup:
      pattern:  ^/api/signup
      stateless: true
      anonymous: true

    api_secured:
      pattern:  ^/api
      provider: users
      stateless: true
      guard:
        authenticators:
          - lexik_jwt_authentication.jwt_token_authenticator

    secured_area:
      provider: users
      anonymous: ~
      guard:
        entry_point: 'Acme\Infrastructure\User\Auth\Guard\LoginAuthenticator'
        authenticators:
          - 'Acme\Infrastructure\User\Auth\Guard\LoginAuthenticator'
      form_login:
        login_path: /sign-in
        check_path: sign-in
      logout:
        path: /logout
        target: /

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    - { path: ^/profile/*,   roles: ROLE_USER                    }
    - { path: ^/api/healthz, roles: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/login,       roles: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/api/auth,    roles: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/api/signup,  roles: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/api/doc,     roles: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/api/,        roles: IS_AUTHENTICATED_FULLY       }
